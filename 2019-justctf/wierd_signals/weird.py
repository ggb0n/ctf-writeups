# with open('wierd_signals.csv') as f:
#     data = f.readlines()

# last = ''
# binary = []

# for d in data[1:]:
#     d = ''.join(d.strip().split(','))
#     if d != last:
#         last = d
#         binary.append(d)

binary = ['0010000', '0011000', '0111000', '0011000', '0111000', '0011000', '0111000', '0011000', '0001000', '0101000', '0001000', '0101000', '0001000', '0000000', '0000010', '0100010', '0000010', '0000000', '0100000', '0000000', '0000100', '0000110', '0100110', '0000110', '0000010', '0000000', '0100000', '0000000', '0010000', '0110000', '0010000', '0000000', '0100000', '0000000', '0001000', '0001100', '0101100', '0001100', '0000100', '0000000', '0000010', '0100010', '0000010', '0000000', '0100000', '0000000', '1000000', '1001000', '1001100', '1101100', '1001100', '1001000', '1001010', '1101010', '1001010', '1011010', '1011110', '1011100', '1111100', '1011100', '1010100', '1110100', '1010100', '1011100', '1111100', '1011100', '1011000', '1111000', '1011000', '1011100', '1111100', '1011100', '1001100', '1000100', '1100100', '1000100', '1100100', '1000100', '1010100', '1011100', '1011000', '1111000', '1011000', '1010000', '1010100', '1110100', '1010100', '1000100', '1100100', '1000100', '1100100', '1000100', '1001100', '1101100', '1001100', '1011100', '1111100', '1011100', '1011000', '1011010', '1111010', '1011010', '0011010', '0001010', '0000010', '0000110', '0100110', '0000110', '0001110', '0001010', '0001000', '0101000', '0001000', '1001000', '1011000', '1111000', '1011000', '1001000', '1000000', '1100000', '1000000', '1001000', '1001100', '1101100', '1001100', '1000100', '1000110', '1100110', '1000110', '1001110', '1001100', '1101100', '1001100', '1000100', '1100100', '1000100', '1010100', '1110100', '1010100', '1011100', '1011110', '1111110', '1011110', '1011010', '1011000', '1111000', '1011000', '1010000', '1010100', '1110100', '1010100', '1000100', '1001100', '1101100', '1001100', '1011100', '1011000', '1111000', '1011000', '1001000', '1001100', '1101100', '1001100', '1000100', '1000000', '1000010', '1100010', '1000010', '1010010', '1011010', '1011000', '1111000', '1011000', '1001000', '1000000', '1100000', '1000000', '1010000', '1011000', '1111000', '1011000', '1001000', '1000000', '1100000', '1000000', '1001000', '1001100', '1101100', '1001100', '1000100', '1000110', '1100110', '1000110', '1010110', '1010100', '1110100', '1010100', '1011100', '1011110', '1111110', '1011110', '1001110', '1000110', '1000100', '1100100', '1000100', '1000110', '1100110', '1000110', '1000100', '1100100', '1000100', '1100100', '1000100', '1100100', '1000100', '1010100', '1011100', '1011000', '1111000', '1011000', '1010000', '1010100', '1110100', '1010100', '1011100', '1011110', '1111110', '1011110', '0011110', '0010110', '0010010', '0110010', '0010010', '0000010', '0001010', '0001110', '0001100', '0101100', '0001100', '1001100', '1101100', '1001100', '1000100', '1100100', '1000100', '1010100', '1011100', '1011000', '1111000', '1011000', '1010000', '1110000', '1010000', '1011000', '1111000', '1011000', '1010000', '1010100', '1110100', '1010100', '1011100', '1111100', '1011100', '1001100', '1000100', '1000000', '1100000', '1000000', '1001000', '1001100', '1101100', '1001100', '1000100', '1000110', '1100110', '1000110', '1010110', '1011110', '1011010', '1011000', '1111000', '1011000', '1001000', '1000000', '1000100', '1100100', '1000100', '1010100', '1011100', '1111100', '1011100', '1010100', '1010000', '1010010', '1110010', '1010010', '1011010', '1011000', '1111000', '1011000', '1010000', '1010100', '1110100', '1010100', '1110100', '1010100', '1011100', '1011110', '1111110', '1011110', '1011010', '1011000', '1111000', '1011000', '1001000', '1000000', '1000100', '1100100', '1000100', '1010100', '1011100', '1111100', '1011100', '1001100', '1001000', '1101000', '1001000', '1011000', '1111000', '1011000', '1111000', '1011000', '1010000', '1010100', '1110100', '1010100', '1011100', '1011110', '1111110', '1011110', '1001110', '1001100', '1101100', '1001100', '1011100', '1011000', '1111000', '1011000', '1111000', '1011000', '1001000', '1000000', '1100000', '1000000', '1010000', '1011000', '1111000', '1011000', '1001000', '1000000', '1100000', '1000000', '1001000', '1001100', '1101100', '1001100', '1000100', '1000110', '1100110', '1000110', '0000110', '0001110', '0101110', '0001110', '0011110', '0011100', '0111100', '0011100', '1011100', '1111100', '1011100', '1010100', '1010110', '1110110', '1010110']

# credit LiaVI
types = 'RS,E,DB4,DB5,DB6,DB7,R/W'.split(',')
res = ''
counter = 0

db4 = types.index('DB4')
db5 = types.index('DB5')
db6 = types.index('DB6')
db7 = types.index('DB7')
e = types.index('E')

for l in binary:
    if l[e] == '1':
        if counter % 2:
            total += int(l[db4])*1 + int(l[db5])*2 + \
                int(l[db6])*4 + int(l[db7])*8

            if total in range(33, 127):
                res += chr(total)
        else:
            total = int(l[db4])*16 + int(l[db5])*32 + \
                int(l[db6])*64 + int(l[db7])*128
        counter += 1

print(res)
